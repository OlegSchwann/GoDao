// This file is automatically generated. Do not edit it.
package apply_template

const templateEmbedded = "{{- /*gotype: github.com/OlegSchwann/GoDao/apply_template.DotType*/ -}}\npackage {{ .PackageName }}\n\nimport (\n\t\"context\"\n\t\"github.com/jackc/pgx/v4/pgxpool\"\n\t{{- range $package := .Packages}}\n\t\"{{$package}}\"\n\t{{- end}}\n)\n\nfunc NewGoDao(pool *pgxpool.Pool, ctx context.Context) GoDao {\n\treturn GoDao{\n\t{{- range $function := .Functions}}\n\t\t{{$function.Name}}: func(\n\t\t\t{{- range $index, $inputArgument := $function.InputArguments -}}\n\t\t\t\t{{if $index}}, {{end -}}\n\t\t\t\t{{$inputArgument.Name}} {{$inputArgument.Type -}}\n\t\t\t{{end -}}\n\t\t) (\n\t\t\t{{- range $index, $outputArgument := $function.OutputArguments -}}\n\t\t\t\t{{if $index}}, {{end -}}\n\t\t\t\t{{$outputArgument.Name}} {{$outputArgument.Type -}}\n\t\t\t{{end -}}\n\t\t\t{{if len $function.OutputArguments}}, {{end -}}\n\t\t\terr error{{\"\" -}}\n\t\t) {\n\t\t\tsql := `{{$function.SQL}}`\n\t\t\t{{if eq $function.ReturnValueType 1 -}}\n\t\t\t_, err = pool.Exec(contex.Background(), sql\n\t\t\t\t{{- range $inputArgument := $function.InputArguments -}}\n\t\t\t\t\t, {{$inputArgument.Name -}}\n\t\t\t\t{{end -}}\n\t\t\t)\n\t\t\t{{else if eq $function.ReturnValueType 2 -}}\n\t\t\terr = pool.QueryRow(contex.Background(), sql\n\t\t\t\t{{- range $inputArgument := $function.InputArguments -}}\n\t\t\t\t\t, {{$inputArgument.Name -}}\n\t\t\t\t{{end -}}\n\t\t\t).Scan(\n\t\t\t\t{{- range $index, $outputArgument := $function.OutputArguments -}}\n\t\t\t\t\t{{if $index}}, {{end -}}\n\t\t\t\t\t&{{$outputArgument.Name -}}\n\t\t\t\t{{end -}}\n\t\t\t)\n\t\t\t{{else if eq $function.ReturnValueType 3 -}}\n\t\t\trows, err := pool.Query(contex.Background(), sql\n\t\t\t\t{{- range $inputArgument := $function.InputArguments -}}\n\t\t\t\t\t, {{$inputArgument.Name -}}\n\t\t\t\t{{end -}}\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer rows.Close()\n\t\t\tfor rows.Next() {\n\t\t\t\tvar tmp {{$function.UnderlyingTypeName}}\n\t\t\t\terr = rows.Scan(&tmp)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t{{(index $function.OutputArguments 0).Name}} = appand({{(index $function.OutputArguments 0).Name}}, tmp)\n\t\t\t}\n\t\t\t{{else if eq $function.ReturnValueType 4 -}}\n\t\t\trows, err := pool.Query(contex.Background(), sql\n\t\t\t{{- range $inputArgument := $function.InputArguments -}}\n\t\t\t\t, {{$inputArgument.Name -}}\n\t\t\t{{end -}}\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefer rows.Close()\n\t\t\tfor rows.Next() {\n\t\t\t\tvar tmp {{$function.UnderlyingTypeName}}\n\t\t\t\terr = rows.Scan(\n\t\t\t\t{{- range $index, $fieldName := $function.RowFieldsNames -}}\n\t\t\t\t\t{{if $index}}, {{end -}}\n\t\t\t\t\t&tmp.{{$fieldName -}}\n\t\t\t\t{{end -}}\n\t\t\t\t)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t{{(index $function.OutputArguments 0).Name}} = appand({{(index $function.OutputArguments 0).Name}}, tmp)\n\t\t\t}\n\t\t\t{{end -}}\n\t\t\treturn\n\t\t},\n\t{{end -}}\n\t}\n}\n"
