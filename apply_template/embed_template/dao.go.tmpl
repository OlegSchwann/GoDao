{{- /*gotype: github.com/OlegSchwann/GoDao/apply_template.DotType*/ -}}
package {{ .PackageName }}

import (
	"context"
	"github.com/jackc/pgx/v4/pgxpool"
	{{- range $package := .Packages}}
	"{{$package}}"
	{{- end}}
)

func NewGoDao(pool *pgxpool.Pool, ctx context.Context) GoDao {
	return GoDao{
	{{- range $function := .Functions}}
		{{$function.Name}}: func(
			{{- range $index, $inputArgument := $function.InputArguments -}}
				{{if $index}}, {{end -}}
				{{$inputArgument.Name}} {{$inputArgument.Type -}}
			{{end -}}
		) (
			{{- range $index, $outputArgument := $function.OutputArguments -}}
				{{if $index}}, {{end -}}
				{{$outputArgument.Name}} {{$outputArgument.Type -}}
			{{end -}}
			{{if len $function.OutputArguments}}, {{end -}}
			err error{{"" -}}
		) {
			sql := `{{$function.SQL}}`
			{{if eq $function.ReturnValueType 1 -}}
			_, err = pool.Exec(contex.Background(), sql
				{{- range $inputArgument := $function.InputArguments -}}
					, {{$inputArgument.Name -}}
				{{end -}}
			)
			{{else if eq $function.ReturnValueType 2 -}}
			err = pool.QueryRow(contex.Background(), sql
				{{- range $inputArgument := $function.InputArguments -}}
					, {{$inputArgument.Name -}}
				{{end -}}
			).Scan(
				{{- range $index, $outputArgument := $function.OutputArguments -}}
					{{if $index}}, {{end -}}
					&{{$outputArgument.Name -}}
				{{end -}}
			)
			{{else if eq $function.ReturnValueType 3 -}}
			rows, err := pool.Query(contex.Background(), sql
				{{- range $inputArgument := $function.InputArguments -}}
					, {{$inputArgument.Name -}}
				{{end -}}
			)
			if err != nil {
				return
			}
			defer rows.Close()
			for rows.Next() {
				var tmp {{$function.UnderlyingTypeName}}
				err = rows.Scan(&tmp)
				if err != nil {
					return
				}
				{{(index $function.OutputArguments 0).Name}} = appand({{(index $function.OutputArguments 0).Name}}, tmp)
			}
			{{else if eq $function.ReturnValueType 4 -}}
			rows, err := pool.Query(contex.Background(), sql
			{{- range $inputArgument := $function.InputArguments -}}
				, {{$inputArgument.Name -}}
			{{end -}}
			)
			if err != nil {
				return
			}
			defer rows.Close()
			for rows.Next() {
				var tmp {{$function.UnderlyingTypeName}}
				err = rows.Scan(
				{{- range $index, $fieldName := $function.RowFieldsNames -}}
					{{if $index}}, {{end -}}
					&tmp.{{$fieldName -}}
				{{end -}}
				)
				if err != nil {
					return
				}
				{{(index $function.OutputArguments 0).Name}} = appand({{(index $function.OutputArguments 0).Name}}, tmp)
			}
			{{end -}}
			return
		},
	{{end -}}
	}
}
